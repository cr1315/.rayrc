###
# lf go docs
#   https://pkg.go.dev/github.com/gokcehan/lf#hdr-Syntax
###

######################################################################
#
# set
#
######################################################################
## interpreter for shell commands
set shell bash
# shellflag      string    (default '-c' for Unix and '/c' for Windows)
set shellopts '-eu'

# dircache       bool      (default true)
# hidden         bool      (default false)

# incsearch      bool      (default false)
# incfilter      bool      (default false)
# globsearch     bool      (default false)

set ifs "\n"
# filesep        string    (default "\n")

## format
# ratios         []int     (default '1:2:3')
# set drawbox        true      ## (default false)
# set promptfmt "\033[32;1m${USER}@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m%SLF_LEVEL: "    ## (default "\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f\033[0m")
# set number true      ## (default false)
# truncatechar   string    (default '~')
set icons on

## leave some space at the top and the bottom of the screen
set scrolloff 10

# cursoractivefmt   string    (default "\033[7m")
# cursorparentfmt   string    (default "\033[7m")
# cursorpreviewfmt  string    (default "\033[4m")

## List of information shown for directory items at the right side of pane. Currently supported information types are 'size', 'time', 'atime', and 'ctime'. Information is only shown when the pane width is more than twice the width of information.
# info           []string  (default '')

# set mouse bool      ## (default false)

# dirpreviews    bool      (default false)
## we don't want to specify the full path here
##   thus we cp preview to our bin dir
## set previewer /home/ray/.rayrc/libs/lf/config/lf/lf-previewer
set preview true
set previewer lf-previewer
set tabstop 4        ## (default 8)

# set cleaner


######################################################################
#
# cmd
#
######################################################################

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

####
#
####
# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
# cmd open ${{
#     test -L $f && f=$(readlink -f $f)
#     case $(file --mime-type $f -b) in
#         text/*) $EDITOR $fx;;
#         *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
#     esac
# }}


######################################################################
#
# map
#
######################################################################
# use enter for shell commands
# map <enter> shell

# execute current file (must be executable)
# map x $$f
# map X !$f

# dedicated keys for file opener actions
# map o &mimeopen $f
# map O $mimeopen --ask $f

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ "$ans" = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

## TODO: use $HOME
# map gh cd $$HOME
map g/ cd /
map ge cd /etc
map gl cd /var/log

## map c tar.gz
### cmd tar.gz ${{
###   tmp_dir=mktemp
###   cp -r $fx $tmp_dir
###   tar czf $1.tar.gz -C $1 .
###   rm -rf $1
### }}


######################################################################
#
# cmap
#
######################################################################

